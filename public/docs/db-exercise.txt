1.

create table my_stocks(
	symbol varchar(20) not null, 
	n_shares integer not null,
	date_acquired date not null
);

COPY my_stocks (symbol, n_shares, date_acquired) 
   FROM '/home/basanta/railsapps/quotedb/doc/my_stock_data.txt';

----------------------------------------------------------
2.

create table stock_prices 
as 	(select symbol, current_date as quote_date, 31.415 as price 
	from my_stocks)
;

create table newly_acquired_stocks(
	symbol varchar(20) not null, 
	n_shares integer not null,
	date_acquired date not null
);


insert into newly_acquired_stocks  
	select * 
	from my_stocks 
	limit (select count(*) from my_stocks) /2
;
------------------------------------------------------------
3.

select m.symbol, m.n_shares, s.price, m.n_shares*s.price current_value 
from my_stocks m, stock_prices s 
where m.symbol = s.symbol
;
------------------------------------------------------------
4.
insert into my_stocks values('G-able', 5500, current_date);

select m.symbol, m.n_shares, s.price, m.n_shares*s.price current_value 
from my_stocks m left outer join stock_prices s 
on m.symbol = s.symbol
;
------------------------------------------------------------
5.

CREATE LANGUAGE plpgsql;

create or replace function get_stock(p_symbols my_stocks.symbol%type) returns integer as 
$BODY$
declare
	v_stock_value integer := 0;
	v_length integer;
	v_ascii integer;
begin
	select length(p_symbols::text) into v_length;
	for i in 0..v_length
	loop
		select ascii(substr(p_symbols,i,1)) into v_ascii;
		v_stock_value := v_stock_value + v_ascii;
	end loop;
	
	return v_stock_value;
end;
$BODY$
LANGUAGE 'plpgsql'
;

update stock_prices set price = get_stock(symbol);

create or replace function portfolio_value() returns integer as 
$BODY$
declare
	r_price record;
	v_sum integer := 0;
begin
	for r_price in select m.n_shares*s.price cur_price
		       from my_stocks m, stock_prices s 
		       where m.symbol = s.symbol
	loop
		v_sum := v_sum + r_price.cur_price;
	end loop;
	return v_sum;
end;
$BODY$
LANGUAGE 'plpgsql'
;
-------------------------------------------------------------
6.

select avg(price) from stock_prices ;

insert into my_stocks 
select m.symbol, m.n_shares, current_date date_acquired 
from  my_stocks m 
where m.symbol in ( select st.symbol from stock_prices st where st.price > (select avg(s.price) from stock_prices s))
; 


select symbol, sum(n_shares) from my_stocks group by 1;

select m.symbol, sum(m.n_shares*s.price) 
from my_stocks m left outer join stock_prices s 
on m.symbol = s.symbol
group by 1
;

select m.symbol, sum(n_shares) as share, sum(m.n_shares*s.price) as price    
from my_stocks m left outer join stock_prices s 
on m.symbol = s.symbol
group by 1
having count(m.symbol) > 1
;
------------------------------------------------------------
7.

create view stocks_i_like as
select m.symbol, sum(n_shares) as share, sum(m.n_shares*s.price) as price    
from my_stocks m left outer join stock_prices s 
on m.symbol = s.symbol
group by 1
having count(m.symbol) > 1
;

------------------------------------------------------------




